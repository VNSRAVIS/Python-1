Unit Test Framework - pytest

pytest test discovery rules
  a) test file name should be starting with test
  b) method names should start with test
  other rules include suffixes and file extensions

Installation
  pip install pytest

Execution
   python -m pytest  [recursively find and execute tests]
   or
   py.test
   py.test -v    #[v => verbose]




mathlib.py

def calc_total(a,b):
	return a+b

def calc_multiply(a,b):
	return a*b



test_mathlib.py

import mathlib

def test_calc_total():
	total = mathlib.calc_total(4,5)
	assert total == 9


def test_calc_multiply():
	result = mathlib.calc_multiply(4,5)
	assert result == 20


How to skip tests
	a) add pytest module -> import pytest
	b) add decorator @pytest.mark.skip(reason = 'skip reason')
	                 @pytest.mark.skipif(sys.version_info > (2,7), reason = 'skip reason')
	 python -v -rxs
Selectively run tests using name
	a) pytest -k multiply [runs all tests with substring multiply in method name]
Custom markers
	E.g:- categorize tests based on os i.e win, linux
	a) add pytest module -> import pytest
	b) add decorator @pytest.mark.win (win is a marker can be any arbitrary name for that group)
	python -v -m win 
    

Fixtures


parameters - testing multiple inputs

import mathlib
import pytest

@pytest.mark.parameterize("testinput, testoutput",
			  [
			   (5, 25),
			   (10, 100),
			   (7, 49)
			  ] )
def test_calc-square(testinput, testoutput):
    result = mathlib.calc_square(test_input)
    assert result = testoutput


